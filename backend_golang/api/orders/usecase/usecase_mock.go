// Code generated by MockGen. DO NOT EDIT.
// Source: api/orders/usecase.go

// Package usecase is a generated GoMock package.
package usecase

import (
	models "backend_golang/domain/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockUsecase) All(simpleContext context.Context) (*models.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", simpleContext)
	ret0, _ := ret[0].(*models.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockUsecaseMockRecorder) All(simpleContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockUsecase)(nil).All), simpleContext)
}
